# -*- coding: utf-8 -*-
"""Logistic Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jRJjzWmDHej90p2jVkvPbI54dc6bXT6P
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("https://raw.githubusercontent.com/nttuan8/DL_Tutorial/master/L2/dataset.csv")
data.head()

N, d = data.shape

X = np.array(data.iloc[:, 0:(d - 1)]).reshape(-1, d - 1)
Y = np.array(data.iloc[:, d - 1]).reshape(-1, 1)

X.shape

plt.scatter(X[:10, 0], X[:10, 1], c='blue', edgecolors='none', s=30, label='Cho vay')
plt.scatter(X[10:, 0], X[10:, 1], c='red', edgecolors='none', s=30, label='Từ chối cho vay')
plt.legend()
plt.xlabel('Lương')
plt.ylabel('Thời gian làm việc')

class LogistricRegression:
  def __init__(self, learning_rate, num_iterations):
    self.lr = learning_rate
    self.iterations = num_iterations

  def fit(self, X, Y):
    self._m, self._n = X.shape
    self.W = np.array([0.,0.1,0.1]).reshape(-1,1)
    self.X = np.hstack((np.ones((self._m, 1)), X))
    self.Y = Y

    # Gradient descent
    for i in range(1, self.iterations):
      # self.cost[i] = -np.sum(np.multiply(self.Y, np.log(self._sigmoid(self.X, self.W))) + np.multiply(1 - self.Y, np.log(1 - self._sigmoid(self.X, self.W))))
      self._update_w()
    return self

  def weight(self):
    return self.W

  def _update_w(self):
    dW = np.dot(self.X.T, self._sigmoid(self.X, self.W) - self.Y)
    self.W = self.W - self.lr * dW

  def _sigmoid(self, X, W):
    self.z = np.dot(self.X, W)
    return 1 / (1 + np.exp(-self.z))

logistic_example = LogistricRegression(0.01, 1000)

logistic_example.fit(X, Y)

logistic_example.weight()

plt.scatter(X[:10, 0], X[:10, 1], c='blue', edgecolors='none', s=30, label='Cho vay')
plt.scatter(X[10:, 0], X[10:, 1], c='red', edgecolors='none', s=30, label='Từ chối cho vay')
plt.legend()
plt.xlabel('Lương')
plt.ylabel('Thời gian làm việc')
plt.plot((4, 10),(-(logistic_example.W[0]+ 4 * logistic_example.W[1]+ np.log(1/0.8-1))/logistic_example.W[2], -(logistic_example.W[0] + 10 * logistic_example.W[1] + np.log(1/0.8-1))/logistic_example.W[2]), 'g')